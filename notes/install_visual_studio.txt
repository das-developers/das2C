Instructions for building das2C on Windows 10 using visual studio tools
-----------------------------------------------------------------------

Windows software devolpoment is cumbersome.  Since there is no one accepted 
standard for paths, tools and packages there are many different paths that
could be followed to build das2C for windows.  The proceedure given here is
not neccesarily the best, just the path that the authors of das2C selected.
It makes use of the best available tools as of Feburary 2020.

0 Install Visual Studio Tools
=============================
First we need a compiler.  Since most system DLLs were compiled with Visual C++,
this is the compiler we'll use.  To insure compatability with pre-compiled
Python3 modules we'll use:

  Microsoft Visual C++ 14.2 standalone.
  
Go here:

  https://visualstudio.microsoft.com/downloads/

Open the "Tools for Visual Studio 2019" accordian and find:

 "Build Tools for Visual Studio 2019"

Click "Download" to get the installer.  It should be a small file named:

  vs_BuildTools.exe
  
Run this file as Administrator.

From the installer screen select "C++ build tools" then on the sidebar select
at least the following opitons:

  * MSVC v142 - VS 2019 C++ x64/x86 build tools
  * Windows 10 SDK
  * CMake tools

select other options as you see fit.  The CMake tools are needed by vcpkg below.

In the "Install locations" tab, feel free to enter a much shorter paths for the
install loacation.  The author shortened:

  C:\Program Files(x86)\Microsoft Visual Studio\2019\BuildTools
  C:\ProgramData\Microsoft\VisualStudio\Packages
  C:\Program Files(x86)\Microsoft Visual Studio\Shared
  
to:

  C:\opt\vs\2019\buildtools
  C:\opt\vs\packages
  C:\opt\vs\shared

The rest of these notes will assume the locations above.  Substitute as needed
for your system.  

After install you will need to reboot your computer, hopefully it's not a server.

After install, open a dos shell and run the standary Visual C environment
config script:

  "\opt\vs\2022\buildtools\Common7\Tools\VsDevCmd.bat"

or equivalent.  You should get the output:

**********************************************************************
** Visual Studio 2022 Developer Command Prompt v17.3.4
** Copyright (c) 2022 Microsoft Corporation
**********************************************************************

Then try:

  cl.exe
  
If this works, then you now have a 32-bit compiler on your path.  Youll need this
for dependency building *even though we're building 64-bit output*.


2 Install Dependencies
======================
As of 2018, Microsoft has relased a small dependency library handler tool called
vcpkg (Visual C++ Package).  It downloads code, not binaries so that you can be
sure that dependencies are build with the same version of the compiler as the
final project.  Furthermore, all downloads, build products settings etc. are
contained within the one top-level vcpgk git clone directory.  Multiple vcpkg
clones can be placed on the same computer without interferring with each other.

This is a welcome development.  

To install vcpkg:

$ git clone https://github.com/microsoft/vcpkg.git
$ cd vcpkg
$ .\bootstrap-vcpkg.bat -disableMetrics


Then gather and build the dependencies:

.\vcpkg install openssl fftw3 zlib expat pthreads --triplet x64-windows-static

After this command is finished (will take a while), you should see the static
library files and headers you need under the subdirectory subdirectory:

  installed\x64-windows-static


3 Checkout and build
====================
For the next section we'll be using the 64-bit only build tools.  First off 
enter a 64-bit build environment using a command similar to the following:

   \opt\vs\2022\buildtools\VC\Auxiliary\Build\vcvarsall.bat x64

this should output text similar to the following:

   **********************************************************************
   ** Visual Studio 2022 Developer Command Prompt v17.3.4
   ** Copyright (c) 2022 Microsoft Corporation
  **********************************************************************
  [vcvarsall.bat] Environment initialized for: 'x64'

NOTE the 'x64' printed at the bottom.

Next you'll need to know the directory where you git cloned vcpkg.  This
directory is called VCPKG_ROOT, below.  Change all instances of VCPGK_ROOT
as appropriate for your situation.

  set VCPKG_ROOT=    (Custom location)

This variable prevents putting binary files in a windows specific sub-folder.
  
  set N_ARCH=\

These variables provide Windows.mak with library and header locations:

  set LIBRARY_INC=%VCPGK_ROOT%\installed\x64-windows-static\include
  set LIBRARY_LIB=%VCPGK_ROOT%\installed\x64-windows-static\lib

This variable determines where the output will be installed:

  set LIBRARY_PREFIX=C:\opt     # for example
  
Then build, test and install the software...

nmake.exe /nologo /f makefiles\Windows.mak build
nmake.exe /nologo /f makefiles\Windows.mak run_test
nmake.exe /nologo /f makefiles\Windows.mak install

    
  **********************************************************************
  ** Visual Studio 2019 Developer Command Prompt v16.4.4
  ** Copyright (c) 2019 Microsoft Corporation
  **********************************************************************
  [vcvarsall.bat] Environment initialized for: 'x64'


  












